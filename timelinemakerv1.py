# -*- coding: utf-8 -*-
"""TimelineMakerV1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JT0gCJ23d1JVmg-qi91qezZSM1_jzAA

# Timeline Creation Code

# Instructions:
# To run the code, please make sure the data you want to represent is in a text file named 'timeline1.txt' in your lowest-level Google Drive folder (i.e. the file should not be within any folders [and neither should this .ipynb file]).
# Simply press the play button located at the top-left corner of the text-box of code below.
# The timeline will be displayed below the code for you to check what it looks like, and the timeline will also be saved in the files 'timeline.pdf' and 'timeline.png'. (You may use whichever file format you prefer).
"""

# Commented out IPython magic to ensure Python compatibility.
# Run this cell to mount your Google Drive.
from google.colab import drive
drive.mount('/content/gdrive')

import matplotlib.pyplot as plt
import numpy as np
import altair as alt
import pandas as pd
import csv
import matplotlib.pylab as pl

from datetime import date

 
# %matplotlib inline  
# since I'm doing this work in a Jupyter Notebook


dates = []
labels = []

with open('/content/gdrive/MyDrive/timeline1.txt','r') as csvfile:
    plots = csv.reader(csvfile, delimiter='\t')
    for row in plots:
        dates.append(int(row[0]))
        labels.append((row[1]))

# plt.plot(dates,names, label='Loaded from file!')
# plt.xlabel('dates')
# plt.ylabel('names')
# plt.title('Interesting Graph\nCheck it out')
# plt.legend()
# plt.show() 

#print(names)
d = []

for i in dates:
    d.append(date(i,1,1))
# reference: https://mentalitch.com/key-events-in-rock-and-roll-history/
#dates = [date(1954, 7, 19), date(1959, 2, 3), date(1964, 2, 9), date(1965, 7, 25), date(1967, 6, 1), date(1969, 8, 15)]
dates = d

# Choose some nice levels
levels = np.tile([-5, 5, -3, 3, -1, 1],
                 int(np.ceil(len(dates)/6)))[:len(dates)]

# Create figure and plot a stem plot with the date
fig, ax = plt.subplots(figsize=(30, 15), constrained_layout=True)
ax.set(title="Timeline Attempt #1")

ax.vlines(dates, 0, levels, color="tab:green")  # The vertical stems.
ax.plot(dates, np.zeros_like(dates), "-o",
        color="k", markerfacecolor="w")  # Baseline and markers on it.

# annotate lines
for d, l, r in zip(dates, levels, labels):
    ax.annotate(r, xy=(d, l),
                xytext=(-3, np.sign(l)*3), textcoords="offset points",
                backgroundcolor="limegreen", horizontalalignment="right",
                verticalalignment="bottom" if l > 0 else "top")


# format xaxis with 4 month intervals
# ax.xaxis.set_major_locator(mdates.MonthLocator(interval=120))
# ax.xaxis.set_major_formatter(mdates.DateFormatter("%b %Y"))
plt.setp(ax.get_xticklabels(), rotation=30, ha="right")

# remove y axis and spines
ax.yaxis.set_visible(False)
# ax.spines[["left", "top", "right"]].set_visible(False)

bbox = dict(boxstyle="round", ec="limegreen", fc="limegreen", alpha=0.5)
pl.setp(ax.get_xticklabels(), bbox=bbox)
pl.setp(ax.get_yticklabels(), backgroundcolor="limegreen")

pl.rcParams.update({'font.size': 52})

import matplotlib.pyplot as plt
from matplotlib import style
plt.style.use('ggplot')

SMALL_SIZE = 8
MEDIUM_SIZE = 10
BIGGER_SIZE = 12

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title



ax.margins(y=0.1)

# plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)

params = {'legend.fontsize': 'x-large',
          'figure.figsize': (15, 5),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
plt.rcParams.update(params)

plt.savefig('timeline.png')
plt.savefig('timeline.pdf')

plt.show()